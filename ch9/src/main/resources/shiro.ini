[main]
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
# cxy session 全局过期时间（单位：毫秒），默认30分钟【默认情况下设置给所有的session】
sessionManager.globalSessionTimeout = 1800000

sessionIdCookie = org.apache.shiro.web.servlet.SimpleCookie
#默认为JSESSIONID
sessionIdCookie.name = sid
#域名，默认空，即当前访问的根域名
#sessionIdCookie.domain=sishuok.com
#路径，默认空，即存储在域名根下
#sessionIdCookie.path=
#过期时间【单位：秒】默认 -1 表示关闭浏览器时过期Cookie
sessionIdCookie.maxAge = 1800
#为true，则服务端不会暴露给给客户端脚本代码--有助于减少某些类型的跨站点脚本攻击【需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持】
sessionIdCookie.httpOnly = true
sessionManager.sessionIdCookie = $sessionIdCookie
#如果禁用，将使用 Servlet 容器的 JSEESIONID ，且通过URL重写（URL中“;JSESSIONID=id”部分）保存 Session Id
sessionManager.sessionIdCookieEnabled = true
sessionManager.sessionIdUrlRewritingEnabled = true

#sessionDAO - 提供 session 的 CRUD
#sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
sessionDAO = cn.cxy.shiro.session.dao.MySessionDAO
#缓存名称
sessionDAO.activeSessionsCacheName = shiro-activeSessionCache
#对用的 session 管理器
cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
cacheManager.cacheManagerConfigFile = classpath:ehcache.xml

#设置session id 生成器
sessionIdGenerator = org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
$sessionDAO.sessionIdGenerator = $sessionIdGenerator
sessionManager.sessionDAO = $sessionDAO

#session验证
sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
#设置调度时间间隔，单位：毫秒，默认一小时
sessionValidationScheduler.interval = 3600000

## cxy 此调度器默认使用 AbstractValidatingSessionManager 的 validateSessions 进行验证，会直接调用 sessionDAO.getActiveSessions() 获取所有session进行验证 -- 量多时会影响性能 - 可以考虑分页获取验证

sessionValidationScheduler.sessionManager = $sessionManager
#是否开启session验证器
sessionManager.sessionValidationSchedulerEnabled=true

#过期是否删除
#sessionManager.deleteInvalidSessions=false


securityManager.sessionManager = $sessionManager




sessionListener1 = cn.cxy.shiro.listener.MySessionListener1
sessionListener2 = cn.cxy.shiro.listener.MySessionListener2

securityManager.sessionListener = $sessionListener1,$sessionListener2


## cxy authc、roles、perms、logout 等均为 shiro 内置的拦截器

#默认是 /login.jsp
authc.loginUrl = /login
#授权失败时重定向的地址
roles.unauthorizedUrl = /unauthorized
perms.unauthorizedUrl = /unauthorized
#指定退出后的重定向地址
logout.redirectUrl = /login

[users]
zhang = 123,admin,user
wang = 123,user

[roles]
admin = user:*,menu:*
user = user:list

[urls]
/login = anon
/unzuthorized = anon
/static/** = anon
/authenticated = authc
# cxy 如果有多个角色，使用 , 隔开，且验证时使用 hasAllRole 验证，即且的关系
/user = authc,roles[admin,user]
/role = authc,roles[admin]
/permission = authc,perms["user:create"]
#使用 logout 拦截器指定退出URL
/logout2 = logout